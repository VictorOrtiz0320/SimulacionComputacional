traceback()
View(resul)
View(resul)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', encoding = 'UTF-8')
x=data.frame()
Resultados=data.frame()
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', encoding = 'UTF-8')
Resultados=cbind(TiempoT,TiempoO)
x=rbind(x,Resultados)
}
colnames(x)=c("Programa Paralelizado", "Programa Original")
png("Prac8tiempos.png",width=600, height=800,pointsize = 20)
boxplot(x,col=c("Blue","Red"))
graphics.off()
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
library(testit) # para pruebas, recuerda instalar antes de usar
k <- 100000
n <- 1000000
originales <- rnorm(k)
cumulos <- originales - min(originales) + 1
cumulos <- round(n * cumulos / sum(cumulos))
assert(min(cumulos) > 0)
diferencia <- n - sum(cumulos)
if (diferencia > 0) {
for (i in 1:diferencia) {
p <- sample(1:k, 1)
cumulos[p] <- cumulos[p] + 1
}
} else if (diferencia < 0) {
for (i in 1:-diferencia) {
p <- sample(1:k, 1)
if (cumulos[p] > 1) {
cumulos[p] <- cumulos[p] - 1
}
}
}
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
assert(sum(cumulos) == n)
c <- median(cumulos) # tamanio critico de cumulos
d <- sd(cumulos) / 4 # factor arbitrario para suavizar la curva
########################################################################
rotura <- function(x) {
return (1 / (1 + exp((c - x) / d)))
}
union <- function(x) {
return (exp(-x / c))
}
romperse <- function(tam, cuantos) {
romper <- round(rotura(tam) * cuantos) # independientes
resultado <- rep(tam, cuantos - romper) # los demas
if (romper > 0) {
for (cumulo in 1:romper) { # agregar las rotas
t <- 1
if (tam > 2) { # sample no jala con un solo valor
t <- sample(1:(tam-1), 1)
}
resultado <- c(resultado, t, tam - t)
}
}
#assert(sum(resultado) == tam * cuantos) # no hubo perdidas
return(resultado)
}
unirse <- function(tam, cuantos) {
unir <- round(union(tam) * cuantos) # independientes
if (unir > 0) {
division <- c(rep(-tam, unir), rep(tam, cuantos - unir))
#assert(sum(abs(division)) == tam * cuantos)
return(division)
} else {
return(rep(tam, cuantos))
}
}
freq <- as.data.frame(table(cumulos))
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
duracion <- 5
digitos <- floor(log(duracion, 10)) + 1
#Función Rompiendo
rompiendo <- function(i){
cumulos <- integer()
urna <- freq[i,]
if (urna$tam > 1) { # no tiene caso romper si no se puede
cumulos <- c(cumulos, romperse(urna$tam, urna$num))
} else {
cumulos <- c(cumulos, rep(1, urna$num))
}
return(cumulos)
}
#Función Uniendo
uniendo <- function(i){
cumulos <- integer()
#for (i in 1:dim(freq)[1]) { # fase de union
urna <- freq[i,]
cumulos <- c(cumulos, unirse(urna$tam, urna$num))
#}
return(cumulos)
}
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
####################################################################################################################
for (paso in 1:duracion) {
#Rompiendo
assert(sum(cumulos) == n)
cumulos=foreach(i=1:dim(freq)[1], .combine = c) %dopar% rompiendo (i)
#stopImplicitCluster()
assert(sum(cumulos) == n)
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
freq <- as.data.frame(table(cumulos)) # actualizar urnas
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
assert(sum(freq$num * freq$tam) == n)
}
View(freq)
View(freq)
cumulos=foreach(i=1:dim(freq)[1], .combine = c) %dopar% uniendo (i)
stopImplicitCluster()
View(freq)
View(freq)
assert(sum(abs(cumulos)) == n)
assert(length(cumulos[cumulos == 0]) == 0) # que no haya vacios
juntarse <- -cumulos[cumulos < 0]
cumulos <- cumulos[cumulos > 0]
assert(sum(cumulos) + sum(juntarse) == n)
nt <- length(juntarse)
if (nt > 0) {
if (nt > 1) {
juntarse <- sample(juntarse)
for (i in 1:floor(nt / 2) ) {
cumulos <- c(cumulos, juntarse[2*i-1] + juntarse[2*i])
}
}
if (nt %% 2 == 1) {
cumulos <- c(cumulos, juntarse[nt])
}
}
assert(sum(cumulos) == n)
freq <- as.data.frame(table(cumulos))
names(freq) <- c("tam", "num")
freq$tam <- as.numeric(levels(freq$tam))[freq$tam]
assert(sum(freq$num * freq$tam) == n)
View(freq)
View(freq)
hist(cumulos,
#breaks=seq(0, tope, 50),
main=paste("Paso", paso, "con ambos fen\u{00f3}menos"), freq=FALSE,
ylim=c(0, 0.3), xlab="Tama\u{00f1}o", ylab="Frecuencia relativa")
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/p8para.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
setwd("~/GitHub/SimulacionComputacional/P8/p8para")
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
boxplot(x,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
colnames(x)=c("Programa Original", "Programa Paralelizado")
#png("Prac8tiempos.png",width=600, height=800,pointsize = 20)
boxplot(x,col=c("Blue","Red"))
#graphics.off()
setwd("~/GitHub/SimulacionComputacional/P8")
colnames(x)=c("Programa Original", "Programa Paralelizado")
png("Prac8tiempos.png",width=600, height=800,pointsize = 20)
boxplot(x,col=c("Blue","Red"))
graphics.off()
setwd("~/GitHub/SimulacionComputacional/P8")
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
x=data.frame()
Resultados=data.frame()
for (k in seq(50000,200000,50000)){
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Resultados=cbind(k,TiempoO,TiempoT)
x=rbind(x,Resultados)
}
}
x=data.frame()
Resultados=data.frame()
for (k in seq(50000,200000,50000)){
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Resultados=cbind(k,TiempoO,TiempoT)
x=rbind(x,Resultados)
}
}
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
x=data.frame()
Resultados=data.frame()
for (k in seq(50000,200000,50000)){
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Resultados=cbind(k,TiempoO,TiempoT)
x=rbind(x,Resultados)
}
}
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
colnames(x)=c("k","Programa Original", "Programa Paralelizado")
View(x)
View(x)
boxplot(x,col=c("Blue","Red"))
x$k=as.factor(x$k)
boxplot(data=x,col=c("Blue","Red"))
boxplot(x,col=c("Blue","Red"))
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
colnames(x)=c("k","ProgramaO", "ProgramaP")
View(x)
View(x)
x$k=as.factor(x$k)
boxplot(data=x,k~ProgramaO,col=c("Blue","Red"))
boxplot(data=x,ProgramaO~k,col=c("Blue","Red"))
boxplot(data=x,ProgramaO,ProgramaP~k,col=c("Blue","Red"))
boxplot(data=x,ProgramaO/ProgramaP~k,col=c("Blue","Red"))
boxplot(data=x,ProgramaO/ProgramaP~k,col=c("Blue","Red"))
boxplot(data=x,ProgramaO*ProgramaP~k,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
x=data.frame()
Resultados=data.frame()
Toriginal=numeric()
Tparalelo=numeric()
for (k in c(50000,60000)){
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
Toriginal=cbind(k,Tiempo)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Tparalelo=cbind(k,Tiempo)
}
Resultados=cbind(Toriginal,Tparalelo)
x=rbind(x,Resultados)
}
x=data.frame()
Resultados=data.frame()
Toriginal=numeric()
Tparalelo=numeric()
for (k in c(50000,60000)){
for (i in 1:1){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
Toriginal=cbind(k,Tiempo)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Tparalelo=cbind(k,Tiempo)
}
Resultados=cbind(Toriginal,Tparalelo)
x=rbind(x,Resultados)
}
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
Resultados=rbind(Toriginal,Tparalelo)
View(Resultados)
View(Resultados)
Tparalelo=cbind(Toriginal,k,Tiempo)
View(Tparalelo)
View(Tparalelo)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
colnames(x)=c("k","Tiempo","k","Tiempo")
x$k=as.factor(x$k)
boxplot(data=x,Tiempo~k,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(Resultados)
View(Resultados)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(Resultados)
View(Resultados)
colnames(x)=c("k","Tiempo")
View(Resultados)
View(Resultados)
names(x)=c("k","Tiempo")
names(Resultados)=c("kñ","Tiempo")
View(Resultados)
View(Resultados)
names(Resultados)=c("k","Tiempo")
Resultados$k=as.factor(Resultados$k)
boxplot(data=x,Tiempo~k,col=c("Blue","Red"))
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
View(Resultados)
View(Resultados)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
x=data.frame()
Resultados=data.frame()
Toriginal=numeric()
Tparalelo=numeric()
for (k in c(5000,6000,7000)){
for (r in 1:2){
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', encoding = 'UTF-8')
Toriginal=cbind(k,r,Tiempo)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R')
Tparalelo=cbind(k,r,Tiempo)
Resultados=rbind(Resultados,Toriginal,Tparalelo)
}
#x=rbind(x,Resultados)
}
View(Resultados)
View(Resultados)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
View(Resultados)
View(Resultados)
names(Resultados)=c("k","tipo","Tiempo")
Resultados$tipo=as.factor(Resultados$tipo)
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
boxplot(data=Resultados,k~Tiempo,col=c("Blue","Red"))
names(Resultados)=c("k","tipo","Tiempo")
Resultados$tipo=as.factor(Resultados$tipo)
boxplot(data=Resultados,k~Tiempo,col=c("Blue","Red"))
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
names(Resultados)=c("k","tipo","Tiempo")
Resultados$k<-as.numeric(levels(Resultados$k))[Resultados$k]
Resultados$tipo=as.factor(Resultados$tipo)
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
as.factor(tipo)
as.factor(Resultados$tipo)
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
boxplot(data=Resultados,Tiempo~tipo,col=c("Blue","Red"))
boxplot(data=Resultados,Tiempo~k*tipo,col=c("Blue","Red"))
Resultados$k<-as.numeric(levels(Resultados$k))[Resultados$k]
Resultados$Tiempo<-as.numeric(levels(Resultados$Tiempo))[Resultados$Tiempo]
Resultados$tipo=as.factor(Resultados$tipo)
boxplot(data=Resultados,Tiempo~k*tipo,col=c("Blue","Red"))
boxplot(data=Resultados,Tiempo~k,col=c("Blue","Red"))
boxplot(Tiempo~k*tipo,data=Resultados,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
boxplot(Tiempo~k,data=Resultados,col=c("Blue","Red"))
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"))
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
boxplot(data.matrix(Resultados),use.cols=FALSE)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"))
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"),xlab="Valores de K")
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"),xlab="Valores de K",ylab="Tiempo (s)")
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"),xlab="Valores de K",ylab="Tiempo (s)",notch=TRUE)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Blue","Red"),xlab="Valores de K",ylab="Tiempo (s)")
legend("bottomleft", inset=.02, title="Legenda",
c("Paralelizado","Original"), fill=topo.colors(3), horiz=TRUE, cex=0.8)
legend("topleft", inset=.02, title="Legenda",
c("Paralelizado","Original"), fill=topo.colors(3), horiz=TRUE, cex=0.8)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
legend("topleft", inset=.02, title="Legenda",
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("topleft", inset=.02, title="Legenda",
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
y=50
y=strftime(y,format = "%M")
y
y=50
y=format(y,format = "%M")
y
Resultados[Resultados$Tiempo>10,4]<-Resultados[Resultados$Tiempo>10,4]/60
Resultados[Resultados$Tiempo>10,3]<-Resultados[Resultados$Tiempo>10,3]/60
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8)
Resultados[Resultados$k]<-Resultados[Resultados$k]/100000
Resultados[Resultados$k,1]<-Resultados[Resultados$k,1]/100000
Resultados[Resultados$k,1]<-Resultados[Resultados$k,1]/10000
Resultados$k<-as.numeric(levels(Resultados$k))[Resultados$k]
Resultados[Resultados$k,1]<-Resultados[Resultados$k,1]/10000
Resultados$k<-Resultados$k/10000
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8)
legend("topout", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
Resultados$k<-Resultados$k/10000
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
Resultados$k<-Resultados$k/100
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
Resultados$k<-Resultados$k/10
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P12")
setwd("~/GitHub/SimulacionComputacional/P12")
setwd("~/GitHub/SimulacionComputacional/P12")
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
vecO
PruebaTO<-Resultados[Resultados$a == a & Resultados$tipo=="p",]
PruebaTO
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
PruebaTO
vecO
vecP
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$a == a & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$a == a & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
vecO
View(Resultados)
View(Resultados)
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$aPrueba == a & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
names(Resultados)=c("nPrueba","replica","tipo","Tiempo","Paciertos")
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$aPrueba == a & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
load("C:/Users/Sobrenatural/Documents/GitHub/SimulacionComputacional/P12/Practica11chido.RData")
for (a in seq(500,2500,500)){
PruebaTO<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$nPrueba == a & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
View(Resultados)
View(Resultados)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P12/P12T.R', echo=TRUE)
