p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
mmax <- max(p$m)
mmin <- min(p$m)
p$m <- (p$m-mmin)/ (mmax-mmin)
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
mmax <- max(p$m)
mmin <- min(p$m)+0.01
p$m <- (p$m-mmin)/ (mmax-mmin)
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
mmax <- max(p$m)
mmin <- min(p$m)+0.01
p$m <- (p$m-mmin)/ (mmax-mmin)
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
mmax <- max(p$m)
mmin <- min(p$m)+0.01
p$m <- abs((p$m-mmin)/ (mmax-mmin))
library(lattice)
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
mmax <- max(p$m)
mmin <- min(p$m)+0.01
p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
paso <- floor(256 / 10)
niveles <- seq(0, 255, paso)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=rnorm(n))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
mmax <- 5
mmin <- 10
p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
n <- 50
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=abs(rnorm(n)))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
#mmax <- 5
#mmin <- 10
#p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
dir <- (-1)^(1 + 1 * (-0.032 * 0.156 < 0))
dir
dir <- (-1)^(1 + 1 * (-0.032 * -0.156 < 0))
dir
dir <- (-1)^(1 + 1 * (-0.05462 * -0.935456 < 0))
dir
dir <- (-1)^(1 + 1 * (-0.05462 * 0.935456 < 0))
dir
setwd("~/GitHub/SimulacionComputacional/P9")
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
View(p)
View(p)
final<- data.frame()
final2<- data.frame()
final<- cbind(fx,fy,m,p)
final2<-rbind(final2,final)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
View(p)
View(p)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P9")
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
png("p9i.png")
library(lattice)
xyplot(y ~ x, group=g, data=p, auto.key=list(space="right"),
xlab="X", ylab="Y", main="Part\u{00ed}culas generadas",
par.settings = list(superpose.symbol = list(pch = 15, cex = 1.5,
col = colores)))
graphics.off()
eps <- 0.001
resul=data.frame()
final=data.frame()
for(i in 1:50){
xi <- p[i,]$x
yi <- p[i,]$y
ci <- p[i,]$c
mi <- p[i,]$m
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
for (j in 1:n) {
cj <- p[j,]$c
dir <- (-1)^(1 + 1 * (ci * cj < 0))
dx <- xi - p[j,]$x
dy <- yi - p[j,]$y
dm <- p[j,]$m
factor <- dir * abs(ci - cj) / (sqrt(dx^2 + dy^2) + eps)
# factorm <- (mi*dm)/(sqrt(dx^2 + dy^2) + eps)
fxx <- fxx - dx * factor
fyy <- fyy - dy * factor
fx<-fxx/mi
fy<-fyy/mi
resul= cbind(p,m,fx,fy)
}
#return(c(fx, fy))
}
n <- 30
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=abs(rnorm(n)))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
#mmax <- 5
#mmin <- 10
#p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
paso <- floor(256 / 10)
niveles <- seq(0, 255, paso)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
png("p9i.png")
library(lattice)
xyplot(y ~ x, group=g, data=p, auto.key=list(space="right"),
xlab="X", ylab="Y", main="Part\u{00ed}culas generadas",
par.settings = list(superpose.symbol = list(pch = 15, cex = 1.5,
col = colores)))
graphics.off()
eps <- 0.001
resul=data.frame()
final=data.frame()
for(i in 1:50){
xi <- p[i,]$x
yi <- p[i,]$y
ci <- p[i,]$c
mi <- p[i,]$m
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
for (j in 1:n) {
cj <- p[j,]$c
dir <- (-1)^(1 + 1 * (ci * cj < 0))
dx <- xi - p[j,]$x
dy <- yi - p[j,]$y
dm <- p[j,]$m
factor <- dir * abs(ci - cj) / (sqrt(dx^2 + dy^2) + eps)
# factorm <- (mi*dm)/(sqrt(dx^2 + dy^2) + eps)
fxx <- fxx - dx * factor
fyy <- fyy - dy * factor
fx<-fxx/mi
fy<-fyy/mi
resul= cbind(p,m,fx,fy)
}
#return(c(fx, fy))
}
n <- 30
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=abs(rnorm(n)))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
#mmax <- 5
#mmin <- 10
#p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
paso <- floor(256 / 10)
niveles <- seq(0, 255, paso)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
png("p9i.png")
library(lattice)
xyplot(y ~ x, group=g, data=p, auto.key=list(space="right"),
xlab="X", ylab="Y", main="Part\u{00ed}culas generadas",
par.settings = list(superpose.symbol = list(pch = 15, cex = 1.5,
col = colores)))
graphics.off()
eps <- 0.001
resul=data.frame()
final=data.frame()
for(i in 1:50){
xi <- p[i,]$x
yi <- p[i,]$y
ci <- p[i,]$c
mi <- p[i,]$m
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
for (j in 1:n) {
cj <- p[j,]$c
dir <- (-1)^(1 + 1 * (ci * cj < 0))
dx <- xi - p[j,]$x
dy <- yi - p[j,]$y
dm <- p[j,]$m
factor <- dir * abs(ci - cj) / (sqrt(dx^2 + dy^2) + eps)
# factorm <- (mi*dm)/(sqrt(dx^2 + dy^2) + eps)
fxx <- fxx - dx * factor
fyy <- fyy - dy * factor
fx<-fxx/mi
fy<-fyy/mi
resul= cbind(p,fx,fy)
}
#return(c(fx, fy))
}
View(resul)
View(resul)
n <- 30
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=abs(rnorm(n)))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
#mmax <- 5
#mmin <- 10
#p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
paso <- floor(256 / 10)
niveles <- seq(0, 255, paso)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
png("p9i.png")
library(lattice)
xyplot(y ~ x, group=g, data=p, auto.key=list(space="right"),
xlab="X", ylab="Y", main="Part\u{00ed}culas generadas",
par.settings = list(superpose.symbol = list(pch = 15, cex = 1.5,
col = colores)))
graphics.off()
eps <- 0.001
View(p)
View(p)
resul=data.frame()
final=data.frame()
mi <- p[i,]$m
for(i in 1:50){
ci <- p[i,]$c
mi <- p[i,]$m
xi <- p[i,]$x
yi <- p[i,]$y
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
for (j in 1:n) {
cj <- p[j,]$c
dir <- (-1)^(1 + 1 * (ci * cj < 0))
dx <- xi - p[j,]$x
dy <- yi - p[j,]$y
dm <- p[j,]$m
factor <- dir * abs(ci - cj) / (sqrt(dx^2 + dy^2) + eps)
fxx <- fxx - dx * factor
fyy <- fyy - dy * factor
fx<-fxx/mi
fy<-fyy/mi
resul= cbind(p,fx,fy)
}
#return(c(fx, fy))
}
View(resul)
View(resul)
View(p)
View(p)
source('~/.active-rstudio-document', echo=TRUE)
View(p)
View(p)
View(resul)
View(resul)
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
fxx <- fxx - dx * factor
for(i in 1:50){
xi <- p[i,]$x
n <- 30
p <- data.frame(x = rnorm(n), y=rnorm(n), c=rnorm(n), m=abs(rnorm(n)))
xmax <- max(p$x)
xmin <- min(p$x)
p$x <- (p$x - xmin) / (xmax - xmin) # ahora son de 0 a 1
ymax <- max(p$y)
ymin <- min(p$y)
p$y <- (p$y - ymin) / (ymax - ymin) # las y tambien
cmax <- max(p$c)
cmin <- min(p$c)
#mmax <- 5
#mmin <- 10
#p$m <- abs((p$m-mmin)/ (mmax-mmin))
p$c <- 2 * (p$c - cmin) / (cmax - cmin) - 1 # cargas son entre -1 y 1
p$g <- round(5 * p$c) # coloreamos segun la carga a 11 niveles de -5 a 5
paso <- floor(256 / 10)
niveles <- seq(0, 255, paso)
colores <- rgb(niveles, rep(0, 11), rev(niveles), max=255)
png("p9i.png")
library(lattice)
xyplot(y ~ x, group=g, data=p, auto.key=list(space="right"),
xlab="X", ylab="Y", main="Part\u{00ed}culas generadas",
par.settings = list(superpose.symbol = list(pch = 15, cex = 1.5,
col = colores)))
graphics.off()
eps <- 0.001
resul=data.frame()
final=data.frame()
for(i in 1:50){
xi <- p[i,]$x
yi <- p[i,]$y
ci <- p[i,]$c
fxx <- 0
fyy <- 0
fx <- 0
fy <- 0
fm <- 0
for (j in 1:n) {
cj <- p[j,]$c
dir <- (-1)^(1 + 1 * (ci * cj < 0))
dx <- xi - p[j,]$x
dy <- yi - p[j,]$y
dm <- p[j,]$m
factor <- dir * abs(ci - cj) / (sqrt(dx^2 + dy^2) + eps)
# factorm <- (mi*dm)/(sqrt(dx^2 + dy^2) + eps)
fxx <- fxx - dx * factor
fyy <- fyy - dy * factor
fx  <- fxx/mi
fy  <- fyy/mi
}
}
source('~/.active-rstudio-document', echo=TRUE)
fy <- 0
source('~/.active-rstudio-document', echo=TRUE)
View(resul)
View(resul)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(p)
View(p)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(final)
View(final)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
fxx
fyy
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
fyy
fxx
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
f
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
View(p)
View(p)
View(final)
View(final)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P9")
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
View(p)
View(p)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P9/p9.R', echo=TRUE)
