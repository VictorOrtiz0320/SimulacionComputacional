contagios=con
con
contagios
con
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
contagios
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
View(agentes)
View(agentes)
View(a)
View(a)
View(aI)
View(aI)
View(aR)
View(aR)
View(aS)
View(aS)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios=rep(FALSE,n)
contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return(contagios[j] <- TRUE)
}
}
}
}
}
}
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.1
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagios=rep(FALSE,n)
a1 <- agentes[i, ]
View(a1)
View(a1)
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return(contagios[j] <- TRUE)
}
}
}
}
}
}
}
a1
a1
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios
contagiios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
boxplot(Resultados)
View(Resultados)
View(Resultados)
source('~/.active-rstudio-document', echo=TRUE)
boxplot(Resultados)
boxplot(Resultados)
Resultados
source('~/.active-rstudio-document', echo=TRUE)
Resultados
source('~/.active-rstudio-document', echo=TRUE)
PP
PO
source('~/.active-rstudio-document', echo=TRUE)
Resultados=cbind(PP,PO)
boxplot(Resultados)
names(Resultados)=c("Programa P, Programa O")
boxplot(Resultados)
Resultados
View(Resultados)
View(Resultados)
Resultados=cbind(PP,PO)
names(Resultados)=c("Programa P, Programa O")
Resultados
View(Resultados)
View(Resultados)
Resultados=cbind(PP,PO)
col.names(Resultados)=c("Programa P, Programa O")
Resultados=cbind(PP,PO)
col.names(Resultados)=c("Programa P, Programa O")
data.frame.names(Resultados)=c("Programa P, Programa O")
names(Resultados)=c("Programa P, Programa O")
source('~/.active-rstudio-document', echo=TRUE)
View(Resultados)
View(Resultados)
colnames(Resultados)=c("Programa P, Programa O")
View(Resultados)
View(Resultados)
colnames(Resultados)=c("T,Programa P, Programa O")
View(Resultados)
View(Resultados)
Resultados=cbind(PP,PO)
colnames(Resultados)=c("Programa P, Programa O")
boxplot(Resultados)
traceback()
View(Resultados)
View(Resultados)
Resultados=cbind(PP,PO)
colnames(Resultados)=c("ProgramaP, ProgramaO")
boxplot(Resultados)
Resultados=cbind(PP,PO)
colnames(Resultados)=c("ProgramaP")
boxplot(Resultados)
Resultados=cbind(PP,PO)
colnames(Resultados)=c("ProgramaP,o,p,i")
boxplot(Resultados)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
boxplot(x)
colnames(x)=c("Programa Paralelizado, Programa Original")
boxplot(x)
colnames(Resultados)=c("Programa Paralelizado, Programa Original")
boxplot(Resultados)
View(x)
View(x)
colnames(x)=c("Programa Paralelizado", "Programa Original")
boxplot(x)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
x
View(x)
View(x)
boxplot(x)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
boxplot(x)
View(x)
View(x)
View(x)
View(x)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
boxplot(x)
boxplot(resultados)
View(x)
View(x)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(x)
View(x)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(x)
View(x)
View(resultados)
View(resultados)
x$pi=as.factor(x$pi)
boxplot(x)
boxplot(data.matrix(x), use.cols=FALSE)
boxplot(data.matrix(x), use.cols=FALSE)
boxplot(data.matrix(x))
resultados=cbind(pi,epidemia)
x=rbind(x,resultados,pi)
x$pi=as.factor(x$pi)
x$pi
boxplot(x)
boxplot(data=x, pi~epidemias)
boxplot(data=x, pi~epidemia)
boxplot(data=x, pi~epidemia,xlab="pi",ylab="epidemia")
boxplot(data=x, pi~epidemia,xlab="pi",ylab="epidemia")
boxplot(data=x, pi~epidemia,xlab="pi",ylab="epidemia")
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
boxplot(x, pi~epidemia, xlab="pi", ylab="epidemia")
boxplot(data=x, pi~epidemia, xlab="pi", ylab="epidemia")
boxplot(x)
boxplot(x, epidemia~pi)
boxplot(data=x, epidemia~pi)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
boxplot(data=x, pi~epidemia, xlab="pi", ylab="epidemia")
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(x)
View(x)
View(x)
View(resultados)
View(resultados)
names(resultados)=c("Pinfectados","Epi")
View(resultados)
View(resultados)
colnames(resultados)=c("Pinfectados","Epi")
x=rbind(x,resultados)
x$Pinfectados=as.factor(x$Pinfectados)
x=rbind(x,resultados)
x$Pinfectados=as.factor(x$Pinfectados)
resultados=cbind(pi,epidemia)
names(resultados)=c("Pinfectados","Epi")
resultados$Pinfectados=as.factor(x$Pinfectados)
x=rbind(x,resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
x=data.frame()
x=rbind(pi,epidemia)
names(x)=c("Pinfectados","Epi")
x$Pinfectados=as.factor(x$Pinfectados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
boxplot(data=resultados, Pinfectados~Epi, xlab="pi", ylab="epidemia")
View(resultados)
View(resultados)
boxplot(data=resultados, Epi~Pinfectados, xlab="pi", ylab="epidemia")
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P6/reto2/reto2.R', echo=TRUE)
View(resultados)
View(resultados)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/p7sinp.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
View(caminatas)
View(caminatas)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
View(caminatas)
View(caminatas)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
View(caminatas)
View(caminatas)
names(caminatas)=c("Replicas","Paso","x","y","f(x,y)")
View(caminatas)
View(caminatas)
caminatas$Replicas=as.factor(caminatas$Replicas)
plot(data=caminatas,Paso~f(x,y))
plot(data=caminatas,f(x,y)~Paso)
boxplot(data=caminatas,f(x,y)~Paso)
plot(data=caminatas,f(x,y)~Paso,type=1)
plot(data=caminatas,f(x,y)~Paso,type="1")
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
plot(data=caminatas,f(x,y)~Paso)
plot(data=caminatas,f(x,y)~Paso,type="1")
plot(data=caminatas,f(x,y)~Paso)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
plot(data=caminatas,f(x,y)~Paso,type="p")
plot(data=caminatas,f(x,y)~Paso,type="l")
plot(data=caminatas,f(x,y)~Paso,type="b")
plot(data=caminatas,f(x,y)~Paso,type="c")
plot(data=caminatas,f(x,y)~Paso,type="o")
plot(data=caminatas,f(x,y)~Paso,type="s")
plot(data=caminatas,f(x,y)~Paso,type="S")
plot(data=caminatas,f(x,y)~Paso,type="n")
plot(data=caminatas,f(x,y)~Paso,type="o")
plot(data=caminatas,f(x,y)~Paso,type="l")
plot(data=caminatas,f(x,y)~Paso,type="p")
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
line(data=caminatas,f(x,y)~Paso,type="p")
lines(data=caminatas,f(x,y)~Paso,type="p")
points(data=caminatas,pch=16,col="red")
points(data=caminatas,f(x,y)~Paso,pch=16,col="red")
points(data=caminatas,f(x,y)~Paso,pch=16,col=c("red","blue","yellow","purple","orange")
)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/ejemplo3/ejemplo3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/p7/p7.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P7/p7/p7.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
rompiendo <- function(i){
cumulos <- integer()
urna <- freq[i,]
if (urna$tam > 1) { # no tiene caso romper si no se puede
cumulos <- c(cumulos, romperse(urna$tam, urna$num))
} else {
cumulos <- c(cumulos, rep(1, urna$num))
}
return(cumulos)
}
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
traceback()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8paralelizado.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(cumulos,
#, breaks=seq(0, tope, 50),
main=paste("Paso", paso, "con ambos fen\u{00f3}menos"), freq=FALSE,
ylim=c(0, 0.05), xlab="Tama\u{00f1}o", ylab="Frecuencia relativa")
source('~/GitHub/SimulacionComputacional/P8/p8paralelizado.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8paralelizado.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8paralelizado.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8paralelizado.R', echo=TRUE)
png(paste("p8_ct", tl, ".png", sep=""), width=300, height=300)
#tope <- 50 * ceiling(max(cumulos) / 50)
hist(cumulos,
#breaks=seq(0, tope, 50),
main=paste("Paso", paso, "con ambos fen\u{00f3}menos"), freq=FALSE,
ylim=c(0, 0.3), xlab="Tama\u{00f1}o", ylab="Frecuencia relativa")
graphics.off()
source('~/GitHub/SimulacionComputacional/P8/Practica8times.R', echo=TRUE)
png("Prac8tiempos.png",width=600, height=800,pointsize = 20)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("top", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
setwd("~/GitHub/SimulacionComputacional/P8")
save.image(file = "Practica8chido.RData")
png("Prac8tiempos.png",width=600, height=800,pointsize = 20)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
png("Prac8tiempos.png",width=600, height=800,pointsize = 10)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
png("Prac8tiempos.png",width=600, height=800,pointsize = 15)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
png("Prac8tiempos.png",width=600, height=800,pointsize = 15)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K 10^4",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
png("Prac8tiempos.png",width=600, height=800,pointsize = 15)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K (10^4)",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
png("Prac8tiempos.png",width=600, height=800,pointsize = 15)
boxplot(Tiempo~tipo*k,data=Resultados,col=c("Green","Blue"),xlab="Valores de K (10^3)",ylab="Tiempo (min)")
legend("topleft", inset=.02,
c("Original","Paralelizado"), fill=c("Green","Blue"), horiz=TRUE, cex=0.8,box.lty = 0)
graphics.off()
for (k in c(80000,100000,150000,200000)){
PruebaTO<-Resultados[Resultados$k == k & Resultados$tipo=="p"]
PruebaTP<-Resultados[Resultados$k == k & Resultados$tipo=="o"]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
for (k in c(80,100,150,200)){
PruebaTO<-Resultados[Resultados$k == k & Resultados$tipo=="p"]
PruebaTP<-Resultados[Resultados$k == k & Resultados$tipo=="o"]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
for (k in c(80,100,150,200)){
PruebaTO<-Resultados[Resultados$k == k & Resultados$tipo=="p",]
PruebaTP<-Resultados[Resultados$k == k & Resultados$tipo=="o",]
vecO<-PruebaTP$Tiempo
vecP<-PruebaTO$Tiempo
student<-t.test(vecO,vecP)
print(student)
}
source('~/GitHub/SimulacionComputacional/P8/P8tarea.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/P8tarea.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/P8tarea.R', echo=TRUE)
View(x)
View(x)
source('~/GitHub/SimulacionComputacional/P8/P8tarea.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P8")
png("Prac8t1.png",width=600, height=800,pointsize = 20)
boxplot(x,col=c("Blue","Red"),ylab="Tiempo (min)")
graphics.off()
setwd("~/GitHub/SimulacionComputacional/P8/p8para")
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P8/p8original")
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P8/p8para")
source('~/GitHub/SimulacionComputacional/P8/p8para/parap8.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P8/p8original")
source('~/GitHub/SimulacionComputacional/P8/p8original/p8original.R', echo=TRUE)
