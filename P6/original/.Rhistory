contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
start.process <- Sys.time()
repetir <- 100
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:8) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=rep(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
end.process <- Sys.time()
Time.process <- end.process - start.process
print(Time.process)
q()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagiios)
View(contagiios)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagiios)
View(contagiios)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
contagiados<- function (i){
contagios <- rep(FALSE, n)
# for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
return(contagios[j])
}
}
}
}
}
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
contagios=foreach(i=1:n, .combine=c) %dopar% contagiados(i)
}
epidemia
contagios=foreach(i=1:n, .combine=c) %dopar% contagiados(i)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagiados<- function (i){
contagios <- rep(FALSE, n)
# for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
return(contagios[j])
}
}
}
}
}
}
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
contagios=foreach(i=1:n) %dopar% contagiados(i)
}
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagiados<- function (i){
contagios <- rep(FALSE, n)
# for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
return(contagios[j])
}
}
}
}
}
}
}
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
contagios=foreach(i=1:n) %dopar% contagiados(i)
}
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagiados<- function (i){
contagios <- rep(FALSE, n)
# for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}  return(contagios[j])
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
contagios=foreach(i=1:n) %dopar% contagiados(i)
}
source('C:/Users/Sobrenatural/Desktop/pra6/p6pa.R', echo=TRUE)
agentesN
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return(contagios[j] <- TRUE)
}
}
}
con=rep(FALSE,n)
con
con=rep(FALSE,n)
contagios=con
con
contagios
con
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
contagios
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/.active-rstudio-document', echo=TRUE)
c
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
View(agentes)
View(agentes)
View(a)
View(a)
View(aI)
View(aI)
View(aR)
View(aR)
View(aS)
View(aS)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios=rep(FALSE,n)
contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return(contagios[j] <- TRUE)
}
}
}
}
}
}
Tinicial=Sys.time()
l <- 1.5
n <- 50
pi <- 0.1
pr <- 0.02
v <- l / 60
n <- 50
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagios=rep(FALSE,n)
a1 <- agentes[i, ]
View(a1)
View(a1)
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return(contagios[j] <- TRUE)
}
}
}
}
}
}
}
a1
a1
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios
contagiios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
epidemia
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/pr6/original.R', echo=TRUE)
Tinicial=Sys.time()
l <- 1.5
n <- 100
pi <- 0.05
pr <- 0.02
pv <- 0.1
v <- l / 60
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1)<pv){e<-"R"}
if (runif(1) < pi && e!="R") {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/reto1.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6/reto1")
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6")
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6/reto1")
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/reto1/reto1.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6/pr6")
