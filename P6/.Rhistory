source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
contagiios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
plot(epidemia)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
gettingstartedParallel
vignette("gettingstartedParallel")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
registerDoParallel(makeCluster(detectCores() - 1))
contagios=foreach(n=1:50, .combine=c) %dopar% contagiados()
stopImplicitCluster()
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- "I"
} else if (a$estado == "I") { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- "R" # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
if (a$x > l) {
a$x <- a$x - l
}
if (a$y > l) {
a$y <- a$y - l
}
if (a$x < 0) {
a$x <- a$x + l
}
if (a$y < 0) {
a$y <- a$y + l
}
agentes[i, ] <- a
}
aS <- agentes[agentes$estado == "S",]
aI <- agentes[agentes$estado == "I",]
aR <- agentes[agentes$estado == "R",]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagiios[i]) {
a$estado <- "I"
} else if (a$estado == "I") { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- "R" # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
if (a$x > l) {
a$x <- a$x - l
}
if (a$y > l) {
a$y <- a$y - l
}
if (a$x < 0) {
a$x <- a$x + l
}
if (a$y < 0) {
a$y <- a$y + l
}
agentes[i, ] <- a
}
View(agentes)
aS <- agentes[agentes$estado == "S",]
aI <- agentes[agentes$estado == "I",]
aR <- agentes[agentes$estado == "R",]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagiados)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(agentes)
View(agentes)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
contagios=logical()
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
contagiados<- function (replica){
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return( contagios[j] <- TRUE)
} else{ return(contagios[j] <- FALSE)}
}
}
}
}
}
}
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
paso=1:n
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagiios=foreach(t=1:50, .combine=c) %dopar% contagiados(t)
contagiios=contagios
stopImplicitCluster()
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- "I"
} else if (a$estado == "I") { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- "R" # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
if (a$x > l) {
a$x <- a$x - l
}
if (a$y > l) {
a$y <- a$y - l
}
if (a$x < 0) {
a$x <- a$x + l
}
if (a$y < 0) {
a$y <- a$y + l
}
agentes[i, ] <- a
}
aS <- agentes[agentes$estado == "S",]
aI <- agentes[agentes$estado == "I",]
aR <- agentes[agentes$estado == "R",]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
contagios=logical()
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
contagiados<- function (replica){
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
return( contagios[j] <- TRUE)
} else{ return(contagios[j] <- FALSE)}
}
}
}
}
}
}
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
paso=1:n
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
#paralelizar contagiados
suppressMessages(library(doParallel))
registerDoParallel(makeCluster(detectCores() - 1))
contagiios=foreach(t=1:50, .combine=c) %dopar% contagiados(t)
contagiios=contagios
stopImplicitCluster()
for (i in 1:n) { # movimientos y actualizaciones
a <- agentes[i, ]
if (contagios[i]) {
a$estado <- "I"
} else if (a$estado == "I") { # ya estaba infectado
if (runif(1) < pr) {
a$estado <- "R" # recupera
}
}
a$x <- a$x + a$dx
a$y <- a$y + a$dy
if (a$x > l) {
a$x <- a$x - l
}
if (a$y > l) {
a$y <- a$y - l
}
if (a$x < 0) {
a$x <- a$x + l
}
if (a$y < 0) {
a$y <- a$y + l
}
agentes[i, ] <- a
}
aS <- agentes[agentes$estado == "S",]
aI <- agentes[agentes$estado == "I",]
aR <- agentes[agentes$estado == "R",]
tl <- paste(tiempo, "", sep="")
while (nchar(tl) < digitos) {
tl <- paste("0", tl, sep="")
}
salida <- paste("p6_t", tl, ".png", sep="")
tiempo <- paste("Paso", tiempo)
png(salida)
plot(l, type="n", main=tiempo, xlim=c(0, l), ylim=c(0, l), xlab="x", ylab="y")
if (dim(aS)[1] > 0) {
points(aS$x, aS$y, pch=15, col="chartreuse3", bg="chartreuse3")
}
if (dim(aI)[1] > 0) {
points(aI$x, aI$y, pch=16, col="firebrick2", bg="firebrick2")
}
if (dim(aR)[1] > 0) {
points(aR$x, aR$y, pch=17, col="goldenrod", bg="goldenrod")
}
graphics.off()
}
png("p6e.png", width=600, height=300)
plot(1:length(epidemia), 100 * epidemia / n, xlab="Tiempo", ylab="Porcentahe de infectados")
graphics.off()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(agentes)
View(agentes)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/pr6/original.R', echo=TRUE)
contagios
source('~/.active-rstudio-document', echo=TRUE)
con
source('~/.active-rstudio-document', echo=TRUE)
View(contagiados)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(a)
View(a)
traceback()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
is.na(contagios)
contagios
is.na(contagios[i])
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
is.na(contagios)
is.na(contagios[i])
contagios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6")
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
contagios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
ncontagios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
ncontagios
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
