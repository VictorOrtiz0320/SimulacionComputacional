contador1
contador2
contador3
datos=data.frame()
dimensiones=sort(sample(1:dim))
norigen=c(contador1,contador2,contador3,contador4,contador5,contador6,contador7,contador8)
datos=rbind(norigen,dimensiones)
barplot(norigen,main="Practica 1", xlab="Dimensiones", ylab="N. veces vuelve al origen",names.arg=dimensiones)
repeticiones
datos
dur=1000
repeticiones=10
contador1=0
contador2=0
contador3=0
contador4=0
contador5=0
contador6=0
contador7=0
contador8=0
for (repetir in 1:repeticiones){
for (dim in 1:8) {
pos=rep(0,dim)
origen=c(pos)
xpos=c(pos)
contador=0
for (t in 1:dur) {
cambiar <- sample(1:dim, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
xpos[dim]=contador
}
print (pos)
}
#return(contador)#
print ("N. veces que vuelve al origen")
print (contador)
if (dim==1){
contador1=contador1+ contador
}
if(dim==2){
contador2=contador2+ contador
}
if (dim==3){
contador3=contador3+ contador
}
if (dim==4){
contador4=contador4+ contador
}
if (dim==5){
contador5=contador5+ contador
}
if (dim==6){
contador6=contador6+ contador
}
if (dim==7){
contador7=contador7+ contador
}
if (dim==8){
contador8=contador8+ contador
}
}
}
contador1
contador2
contador3
datos=data.frame()
dimensiones=sort(sample(1:dim))
norigen=c(contador1,contador2,contador3,contador4,contador5,contador6,contador7,contador8)
datos=rbind(norigen,dimensiones)
barplot(norigen,main="Practica 1", xlab="Dimensiones", ylab="N. veces vuelve al origen",names.arg=dimensiones)
start.process <- Sys.time()
repetir <- 100 #repeticiones
duracion <- 200 #pasos
datos <-  data.frame()
for (dimension in 1:8) {
resultado <- sapply(1:repetir,
function(r) {
pos <- rep(0, dimension)
suma <- 0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar] <- pos[cambiar] + cambio
origen <- rep (0, dimension)
if (all(origen == pos)) {
suma <- suma + 1
}
}
return(suma)
})
datos <- rbind(datos, resultado)
}
png("Dimension8.png")
boxplot(data.matrix(datos), use.cols=FALSE, ylab="Distancia m\u{E1}xima", xlab="Dimensi\u{F3}n", main="Dimension 1:30")
graphics.off()
end.process <- Sys.time()
Time.process <- end.process - start.process
print(Time.process)
datos
boxplot(data.matrix(datos)
boxplot(data.matrix(datos), use.cols=FALSE, ylab="Distancia m\u{E1}xima", xlab="Dimensi\u{F3}n", main="Dimension 1:30")
repetir <- 1
duracion <- 500
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
n=length(pos)
n
origen=c(1,2)
m=length(origen)
m
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
else{
contador=contador
}}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE,
xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen",
main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE,
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
repetir <- 1
duracion <- 500
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
n=length(pos)
n
origen=c(1,2)
m=length(origen)
m
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
repetir <- 1
duracion <- 500
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
n=length(pos)
n
origen=c(1,2)
m=length(origen)
m
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
repetir <- 1
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=c(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
repetir <- 1
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=c(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
repetir <- 100
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=rep(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
repetir <- 100
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:2) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=rep(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
repetir <- 100
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:8) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=rep(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
start.process <- Sys.time()
repetir <- 100
duracion <- 50
library(parallel)
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "duracion")
datos <-  data.frame()
for (dimension in 1:8) {
clusterExport(cluster, "dimension")
resultado <- parSapply(cluster, 1:repetir,
function(r) {
pos=rep(0,dimension)
origen=rep(0,dimension)
contador=0
for (t in 1:duracion) {
cambiar <- sample(1:dimension, 1)
cambio <- 1
if (runif(1) < 0.5) {
cambio <- -1
}
pos[cambiar]= pos[cambiar]+ cambio
if (all (pos==origen)){
contador=contador +1
}
}
return(contador)
})
datos <- rbind(datos, resultado)
}
stopCluster(cluster)
png("p1er.png")
boxplot(data.matrix(datos), use.cols=FALSE, xlab="Dimensi\u{F3}n", ylab="N. veces vuelve al origen", main="Practica 1")
graphics.off()
end.process <- Sys.time()
Time.process <- end.process - start.process
print(Time.process)
q()
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagiados)
View(contagiados)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
l <- 1.5
n <- 50
pi <- 0.05
pr <- 0.02
v <- l / 30
agentes <- data.frame(x = double(), y = double(), dx = double(), dy = double(), estado  = character())
for (i in 1:n) {
e <- "S"
if (runif(1) < pi) {
e <- "I"
}
agentes <- rbind(agentes, data.frame(x = runif(1, 0, l), y = runif(1, 0, l),
dx = runif(1, -v, v), dy = runif(1, -v, v),
estado = e))
levels(agentes$estado) <- c("S", "I", "R")
}
epidemia <- integer()
r <- 0.1
tmax <- 100
digitos <- floor(log(tmax, 10)) + 1
for (tiempo in 1:tmax) {
infectados <- dim(agentes[agentes$estado == "I",])[1]
epidemia <- c(epidemia, infectados)
if (infectados == 0) {
break
}
contagios <- rep(FALSE, n)
for (i in 1:n) { # posibles contagios
a1 <- agentes[i, ]
if (a1$estado == "I") { # desde los infectados
for (j in 1:n) {
if (!contagios[j]) { # aun sin contagio
a2 <- agentes[j, ]
if (a2$estado == "S") { # hacia los susceptibles
dx <- a1$x - a2$x
dy <- a1$y - a2$y
d <- sqrt(dx^2 + dy^2)
if (d < r) { # umbral
p <- (r - d) / r
if (runif(1) < p) {
contagios[j] <- TRUE
}
}
}
}
}
}
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P6")
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(a)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagios)
View(contagios)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagios)
View(contagios)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
View(contagios)
View(contagios)
View(agentes)
View(agentes)
View(a)
View(a)
View(agentes)
View(contagiados)
View(contagiados)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P6/p6.R', echo=TRUE)
