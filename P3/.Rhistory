library(parallel)
dim <- 10
num <-  dim^2
repetir=3
x=0
yi=matrix(rep(0),nrow=repetir,ncol = 9)
datos=data.frame()
for (probabilidad in 1:9){
proba=probabilidad/10
res=1-proba
for (i in 1:repetir){
x[probabilidad]=c(proba)
actual=matrix(sample(c(1:0),num, prob=c(proba,res),replace=TRUE),nrow=dim, ncol=dim)
suppressMessages(library("sna"))
png("p2_t0.png")
plot.sociomatrix(actual, diaglab=FALSE, main="Inicio")
graphics.off()
paso <- function(p) {
fila <- floor((p - 1) / dim) + 1
columna <- ((p - 1) %% dim) + 1
vecindad <-  actual[max(fila - 1, 1) : min(fila + 1, dim),max(columna - 1, 1): min(columna + 1, dim)]
return(1 * ((sum(vecindad) - actual[fila, columna]) == 3))
}
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "dim")
clusterExport(cluster, "paso")
for (iteracion in 1:9) {
clusterExport(cluster, "actual")
siguiente <- parSapply(cluster, 1:num, paso)
if (sum(siguiente) == 0) { # todos murieron
print("Ya no queda nadie vivo.")
break;
}
actual <- matrix(siguiente, nrow=dim, ncol=dim, byrow=TRUE)
salida = paste("p2_t", iteracion, ".png", sep="")
tiempo = paste("Paso", iteracion)
png(salida)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
graphics.off()
}
print(iteracion)
stopCluster(cluster)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
yi[i,probabilidad]=iteracion
}
}
#datos=data.frame(yi)
boxplot(yi,xlab="Probabilidades",ylab="Número de pasos",main="Práctica 2")
library(parallel)
dim <- 10
num <-  dim^2
repetir=100
x=0
yi=matrix(rep(0),nrow=repetir,ncol = 9)
datos=data.frame()
for (probabilidad in 1:9){
proba=probabilidad/10
res=1-proba
for (i in 1:repetir){
x[probabilidad]=c(proba)
actual=matrix(sample(c(1:0),num, prob=c(proba,res),replace=TRUE),nrow=dim, ncol=dim)
suppressMessages(library("sna"))
png("p2_t0.png")
plot.sociomatrix(actual, diaglab=FALSE, main="Inicio")
graphics.off()
paso <- function(p) {
fila <- floor((p - 1) / dim) + 1
columna <- ((p - 1) %% dim) + 1
vecindad <-  actual[max(fila - 1, 1) : min(fila + 1, dim),max(columna - 1, 1): min(columna + 1, dim)]
return(1 * ((sum(vecindad) - actual[fila, columna]) == 3))
}
cluster <- makeCluster(detectCores() - 1)
clusterExport(cluster, "dim")
clusterExport(cluster, "paso")
for (iteracion in 1:9) {
clusterExport(cluster, "actual")
siguiente <- parSapply(cluster, 1:num, paso)
if (sum(siguiente) == 0) { # todos murieron
print("Ya no queda nadie vivo.")
break;
}
actual <- matrix(siguiente, nrow=dim, ncol=dim, byrow=TRUE)
salida = paste("p2_t", iteracion, ".png", sep="")
tiempo = paste("Paso", iteracion)
png(salida)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
graphics.off()
}
print(iteracion)
stopCluster(cluster)
plot.sociomatrix(actual, diaglab=FALSE, main=tiempo)
yi[i,probabilidad]=iteracion
}
}
#datos=data.frame(yi)
boxplot(yi,xlab="Probabilidades",ylab="Número de pasos",main="Práctica 2")
yi
q()
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
setwd("~/GitHub/SimulacionComputacional/P3")
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
source('~/GitHub/SimulacionComputacional/P3/practica3.R', echo=TRUE)
